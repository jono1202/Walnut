eval neg5 "?msd_neg_2 a = (0-5)";
eval five "?msd_neg_2 a = 5";
eval adder "?msd_neg_3 a + b = c";
eval comp "?msd_neg_3 a < b";
eval div2v1 "?msd_neg_2 a = b/2";
eval div2v2 "?msd_neg_2 a = (0-b)/2";
eval div2v3 "?msd_neg_2 _a = b/2";
eval div2v4 "?msd_neg_2 a = b/(0-2)";
eval div2v5 "?msd_neg_2 a = 0-(b/2)";
eval div5v1 "?msd_neg_2 a = b/5";
eval div5v2 "?msd_neg_2 a = b/(0-5)";

reg endsIn2Zeros msd_neg_2 "(0|1)*00"; all binary strings ending in 00	
reg startsWith2Zeros msd_neg_2 "00(0|1)*"; all binary strings starting with 00

def func "(?msd_neg_3 c < 5) & (a = b+1) & (?msd_neg_10 e = 17)"; defining a function 
eval using_function_example "Ea,b,c $func(a,Ed b = d+1 & d = 10,?msd_neg_3 c-2 ,?msd_neg_10 x+1)":

eval thue_morse_pairs "?msd_neg_2 T[i] = T[i+1]";
eval thue_morse_squares "?msd_neg_2 n > 0 & (Ak (k < n & k >= 0) => T[i+k] = T[i+n+k])";
eval thue_morse_order_of_squares "?msd_neg_2 Ei n > 0 & (Ak (k < n & k >= 0) => T[i+k] = T[i+n+k])";
eval thue_morse_has_overlaps "?msd_neg_2 Ei,n n > 0 & ( Ak (k <= n & k >= 0) => T[i+k] = T[i+n+k])";

eval negv1 "?msd_neg_2 a = _5";
eval negv2 "?msd_neg_2 a + _5 = _5";
eval negv3 "?msd_neg_2 _a + 2 = 0";
eval negv4 "?msd_neg_2 _2*_a = 6";

